"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/tradingService.ts":
/*!****************************************!*\
  !*** ./src/services/tradingService.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TradingService: () => (/* binding */ TradingService)\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"(app-pages-browser)/./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-cache */ \"(app-pages-browser)/./node_modules/node-cache/index.js\");\n/* harmony import */ var node_cache__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_cache__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _solanaTrackerService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./solanaTrackerService */ \"(app-pages-browser)/./src/services/solanaTrackerService.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\nclass TradingService {\n    async findTradingOpportunities() {\n        const opportunities = [];\n        try {\n            // Get trending meme tokens\n            const memeTokens = await this.solanaTracker.findMemeTokens();\n            // Analyze each token\n            for (const token of memeTokens){\n                const tokenInfo = await this.solanaTracker.getTokenInfo(token.mint);\n                const analysis = await this.analyzeToken(tokenInfo);\n                if (!analysis.isRisky) {\n                    var _pool_price, _pool_marketCap, _pool_liquidity, _tokenInfo_events_24h;\n                    const pool = tokenInfo.pools[0];\n                    opportunities.push({\n                        token: {\n                            address: token.mint,\n                            name: token.name,\n                            symbol: token.symbol,\n                            price: (pool === null || pool === void 0 ? void 0 : (_pool_price = pool.price) === null || _pool_price === void 0 ? void 0 : _pool_price.usd) || 0,\n                            marketCap: (pool === null || pool === void 0 ? void 0 : (_pool_marketCap = pool.marketCap) === null || _pool_marketCap === void 0 ? void 0 : _pool_marketCap.usd) || 0,\n                            liquidity: (pool === null || pool === void 0 ? void 0 : (_pool_liquidity = pool.liquidity) === null || _pool_liquidity === void 0 ? void 0 : _pool_liquidity.usd) || 0,\n                            volume24h: 0,\n                            priceChange24h: ((_tokenInfo_events_24h = tokenInfo.events['24h']) === null || _tokenInfo_events_24h === void 0 ? void 0 : _tokenInfo_events_24h.priceChangePercentage) || 0\n                        },\n                        confidence: analysis.confidence,\n                        signals: analysis.signals,\n                        riskLevel: analysis.riskLevel,\n                        timestamp: Date.now()\n                    });\n                }\n            }\n            // Sort opportunities by confidence\n            return opportunities.sort((a, b)=>b.confidence - a.confidence);\n        } catch (error) {\n            console.error('Error finding trading opportunities:', error);\n            return [];\n        }\n    }\n    async analyzeToken(tokenInfo) {\n        var _pool_liquidity, _tokenInfo_events_24h, _holders_accounts_;\n        const signals = [];\n        let confidenceScore = 0;\n        let isRisky = false;\n        // Check token age\n        const pool = tokenInfo.pools[0];\n        if (!pool) {\n            return {\n                isRisky: true,\n                confidence: 0,\n                signals: [\n                    'No liquidity pool found'\n                ],\n                riskLevel: 'HIGH'\n            };\n        }\n        // Analyze liquidity\n        const liquidityUSD = ((_pool_liquidity = pool.liquidity) === null || _pool_liquidity === void 0 ? void 0 : _pool_liquidity.usd) || 0;\n        if (liquidityUSD < 10000) {\n            signals.push('Low liquidity');\n            confidenceScore -= 20;\n        } else if (liquidityUSD > 100000) {\n            signals.push('Strong liquidity');\n            confidenceScore += 20;\n        }\n        // Check LP token burn\n        if (pool.lpBurn === 100) {\n            signals.push('100% LP tokens burned');\n            confidenceScore += 15;\n        } else if (pool.lpBurn < 50) {\n            signals.push('Low LP token burn');\n            confidenceScore -= 15;\n        }\n        // Analyze price movement\n        const priceChange24h = ((_tokenInfo_events_24h = tokenInfo.events['24h']) === null || _tokenInfo_events_24h === void 0 ? void 0 : _tokenInfo_events_24h.priceChangePercentage) || 0;\n        if (Math.abs(priceChange24h) > 50) {\n            signals.push('High volatility');\n            confidenceScore -= 10;\n        } else if (priceChange24h > 10) {\n            signals.push('Positive momentum');\n            confidenceScore += 10;\n        }\n        // Check holder distribution\n        const holders = await this.solanaTracker.getTokenHolders(tokenInfo.token.mint);\n        const topHolderPercentage = ((_holders_accounts_ = holders.accounts[0]) === null || _holders_accounts_ === void 0 ? void 0 : _holders_accounts_.percentage) || 0;\n        if (topHolderPercentage > 50) {\n            signals.push('Concentrated holdings');\n            confidenceScore -= 25;\n            isRisky = true;\n        } else if (topHolderPercentage < 10) {\n            signals.push('Well-distributed holdings');\n            confidenceScore += 15;\n        }\n        // Check security risks\n        if (tokenInfo.risk.rugged) {\n            signals.push('Rug pull risk detected');\n            isRisky = true;\n        }\n        if (tokenInfo.risk.score > 5) {\n            signals.push('High risk score');\n            isRisky = true;\n        }\n        // Determine risk level\n        let riskLevel;\n        if (isRisky || confidenceScore < 0) {\n            riskLevel = 'HIGH';\n        } else if (confidenceScore > 50) {\n            riskLevel = 'LOW';\n        } else {\n            riskLevel = 'MEDIUM';\n        }\n        // Normalize confidence score between 0 and 100\n        confidenceScore = Math.max(0, Math.min(100, confidenceScore + 50));\n        return {\n            isRisky,\n            confidence: confidenceScore,\n            signals,\n            riskLevel\n        };\n    }\n    async monitorToken(tokenAddress) {\n        const cacheKey = \"monitor_\".concat(tokenAddress);\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        try {\n            const tokenInfo = await this.solanaTracker.getTokenInfo(tokenAddress);\n            const analysis = await this.analyzeToken(tokenInfo);\n            const monitoringData = {\n                ...tokenInfo,\n                analysis,\n                lastUpdated: Date.now()\n            };\n            this.cache.set(cacheKey, monitoringData);\n            return monitoringData;\n        } catch (error) {\n            console.error('Error monitoring token:', error);\n            throw error;\n        }\n    }\n    async getTokenMetrics(tokenAddress) {\n        try {\n            const [tokenInfo, holders, ath] = await Promise.all([\n                this.solanaTracker.getTokenInfo(tokenAddress),\n                this.solanaTracker.getTokenHolders(tokenAddress),\n                this.solanaTracker.getTokenATH(tokenAddress)\n            ]);\n            return {\n                tokenInfo,\n                holders,\n                ath,\n                lastUpdated: Date.now()\n            };\n        } catch (error) {\n            console.error('Error fetching token metrics:', error);\n            throw error;\n        }\n    }\n    constructor(){\n        var _process_env_RPC_URL;\n        this.solanaTracker = new _solanaTrackerService__WEBPACK_IMPORTED_MODULE_2__.SolanaTrackerService();\n        this.cache = new (node_cache__WEBPACK_IMPORTED_MODULE_1___default())({\n            stdTTL: 300\n        }); // 5 minutes cache\n        const rpcUrl = (((_process_env_RPC_URL = process.env.RPC_URL) === null || _process_env_RPC_URL === void 0 ? void 0 : _process_env_RPC_URL.trim()) || 'https://api.mainnet-beta.solana.com').replace(/\\/$/, '');\n        this.connection = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Connection(rpcUrl);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/tradingService.ts\n"));

/***/ })

});