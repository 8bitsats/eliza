"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/solanaTrackerService.ts":
/*!**********************************************!*\
  !*** ./src/services/solanaTrackerService.ts ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SolanaTrackerService: () => (/* binding */ SolanaTrackerService)\n/* harmony export */ });\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-fetch */ \"(app-pages-browser)/./node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nconst API_KEY = process.env.SOLANA_TRACKER_API_KEY || 'ad453b26-b435-4f73-a653-0d105f8e0583';\nconst BASE_URL = 'https://data.solanatracker.io';\nclass SolanaTrackerService {\n    async getTokenInfo(tokenAddress) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/\").concat(tokenAddress), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async getTokenHolders(tokenAddress) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/\").concat(tokenAddress, \"/holders\"), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async getTokenATH(tokenAddress) {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/\").concat(tokenAddress, \"/ath\"), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async searchTokens(params) {\n        const queryParams = new URLSearchParams();\n        Object.entries(params).forEach((param)=>{\n            let [key, value] = param;\n            if (value !== undefined) {\n                queryParams.append(key, value.toString());\n            }\n        });\n        const response = await fetch(\"\".concat(BASE_URL, \"/search?\").concat(queryParams.toString()), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async getTrendingTokens(timeframe) {\n        const url = timeframe ? \"\".concat(BASE_URL, \"/tokens/trending/\").concat(timeframe) : \"\".concat(BASE_URL, \"/tokens/trending\");\n        const response = await fetch(url, {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async getLatestTokens() {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/latest\"), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async getTopVolumeTokens() {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/volume\"), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async getMultiTokenOverview() {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/multi/all\"), {\n            headers: this.headers\n        });\n        const data = await response.json();\n        return {\n            latest: data.latest || [],\n            graduating: data.graduating || [],\n            graduated: data.graduated || []\n        };\n    }\n    async getGraduatedTokens() {\n        const response = await fetch(\"\".concat(BASE_URL, \"/tokens/multi/graduated\"), {\n            headers: this.headers\n        });\n        return response.json();\n    }\n    async findMemeTokens() {\n        let minLiquidity = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10000;\n        // Search for potential meme tokens with specific criteria\n        const searchResults = await this.searchTokens({\n            query: 'meme OR pepe OR doge OR shib OR inu OR cat OR elon OR moon OR safe OR cum OR chad OR wojak OR based OR wagmi OR frog OR ai OR gpt OR monkey OR ape',\n            minLiquidity,\n            lpBurn: 100,\n            minTotalTransactions: 100,\n            showPriceChanges: true\n        });\n        // Get trending tokens to cross-reference\n        const trendingTokens = await this.getTrendingTokens('1h');\n        const memeTokens = new Set();\n        // Process search results\n        for (const token of searchResults.data){\n            if (this.isMemeToken(token)) {\n                memeTokens.add(token);\n            }\n        }\n        // Process trending tokens that match search result interface\n        for (const tokenInfo of trendingTokens){\n            const token = this.convertTokenInfoToSearchResult(tokenInfo);\n            if (this.isMemeToken(token)) {\n                memeTokens.add(token);\n            }\n        }\n        return Array.from(memeTokens);\n    }\n    convertTokenInfoToSearchResult(tokenInfo) {\n        var _tokenInfo_token_extensions, _tokenInfo_token_extensions1;\n        const defaultPool = {\n            liquidity: {\n                quote: 0,\n                usd: 0\n            },\n            price: {\n                quote: 0,\n                usd: 0\n            },\n            tokenSupply: 0,\n            lpBurn: 0,\n            tokenAddress: '',\n            marketCap: {\n                quote: 0,\n                usd: 0\n            },\n            market: '',\n            security: {\n                freezeAuthority: null,\n                mintAuthority: null\n            }\n        };\n        const pool = tokenInfo.pools[0] || defaultPool;\n        return {\n            id: tokenInfo.token.mint,\n            name: tokenInfo.token.name,\n            symbol: tokenInfo.token.symbol,\n            mint: tokenInfo.token.mint,\n            image: tokenInfo.token.image,\n            decimals: tokenInfo.token.decimals,\n            quoteToken: pool.tokenAddress,\n            hasSocials: !!((_tokenInfo_token_extensions = tokenInfo.token.extensions) === null || _tokenInfo_token_extensions === void 0 ? void 0 : _tokenInfo_token_extensions.twitter) || !!((_tokenInfo_token_extensions1 = tokenInfo.token.extensions) === null || _tokenInfo_token_extensions1 === void 0 ? void 0 : _tokenInfo_token_extensions1.telegram),\n            poolAddress: pool.tokenAddress,\n            liquidityUsd: pool.liquidity.usd,\n            marketCapUsd: pool.marketCap.usd,\n            lpBurn: pool.lpBurn,\n            market: pool.market,\n            freezeAuthority: pool.security.freezeAuthority,\n            mintAuthority: pool.security.mintAuthority,\n            deployer: '',\n            createdAt: Date.now(),\n            status: 'active',\n            lastUpdated: Date.now(),\n            buys: tokenInfo.buys,\n            sells: tokenInfo.sells,\n            totalTransactions: tokenInfo.txns,\n            events: tokenInfo.events\n        };\n    }\n    isMemeToken(token) {\n        var _token_name, _token_symbol, _token_events_24h, _token_events;\n        // Criteria for identifying meme tokens\n        const memeIndicators = [\n            'meme',\n            'pepe',\n            'doge',\n            'shib',\n            'inu',\n            'cat',\n            'elon',\n            'moon',\n            'safe',\n            'cum',\n            'chad',\n            'wojak',\n            'based',\n            'wagmi',\n            'frog',\n            'ai',\n            'gpt',\n            'monkey',\n            'ape'\n        ];\n        const name = ((_token_name = token.name) === null || _token_name === void 0 ? void 0 : _token_name.toLowerCase()) || '';\n        const symbol = ((_token_symbol = token.symbol) === null || _token_symbol === void 0 ? void 0 : _token_symbol.toLowerCase()) || '';\n        // Check if token name/symbol contains meme-related terms\n        const hasMemeTerms = memeIndicators.some((term)=>name.includes(term) || symbol.includes(term));\n        // Additional criteria\n        const hasHighVolatility = ((_token_events = token.events) === null || _token_events === void 0 ? void 0 : (_token_events_24h = _token_events['24h']) === null || _token_events_24h === void 0 ? void 0 : _token_events_24h.priceChangePercentage) ? Math.abs(token.events['24h'].priceChangePercentage) > 10 : false;\n        const hasHighTransactions = token.totalTransactions > 100;\n        const hasLPBurn = token.lpBurn === 100;\n        return (hasMemeTerms || hasHighVolatility) && hasHighTransactions && hasLPBurn;\n    }\n    constructor(){\n        this.headers = {\n            'x-api-key': API_KEY,\n            'Content-Type': 'application/json'\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/solanaTrackerService.ts\n"));

/***/ })

});